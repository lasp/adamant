#!/bin/bash

# This script sets up the environment for the framework,
# including the path, the python environment.

# Only set the environment once:
if test -n "$ADAMANT_ENVIRONMENT_SET"
then
    echo "Adamant environment already activated. Run 'unset ADAMANT_ENVIRONMENT_SET' to reset."
    exit
fi

# If the ADAMANT_DIR is not specified, then set it
if test -z "$ADAMANT_DIR" # ie. /home/user/adamant
then
    # Set the adamant directory based on the location of this file.
    export ADAMANT_DIR=`readlink -f "${BASH_SOURCE[0]}" | xargs dirname | xargs dirname`
fi

echo "------------------------------------------------------------------"
echo "Activating Adamant environment at $ADAMANT_DIR."
echo "------------------------------------------------------------------"

# We expect input arguments to be a list of build roots
# (not including the adamant directory) in the form:
#
#   path/to/build_root_1:path/to/build_root_2:etc
#
IFS=':' read -ra paths <<< "$1"

# Check if $ADAMANT_DIR is present in the paths
found_adamant_dir=false
for path in "${paths[@]}"; do
    if [ "$path" = "$ADAMANT_DIR" ]; then
        found_adamant_dir=true
        break
    fi
done

# If $ADAMANT_DIR is not found, insert it at the beginning of the paths
if [ "$found_adamant_dir" = false ]; then
    paths=("$ADAMANT_DIR" "${paths[@]}")
fi

# Make sure the permissions of everything in the paths is correct
# on some systems (SELinux) the bind mounts have root permissions
# and this is a way to fix that.
user="user"
for path in "${paths[@]}"; do
    # Get the current owner of the directory
    current_owner=$(stat -c "%U:%G" $path)
    # Check if the owner is not user:user
    if [ "$current_owner" != "$user:$user" ]; then
        echo "Changing ownership of $path to $user:$user."
        sudo chown -R $user:$user $path 2>/dev/null
    fi
done

# If the ADAMANT_CONFIGURATION_YAML is not specified then set it
if test -z "$ADAMANT_CONFIGURATION_YAML" # ie. /home/user/adamant
then
    config_file=$ADAMANT_DIR/config/adamant.configuration.yaml
    # Copy if from .original if needed
    if ! test -f "$config_file"
    then
        cp -f $config_file.original $config_file
    fi
    export ADAMANT_CONFIGURATION_YAML=$config_file
fi

# Set up python. If the ADAMANT_PYTHON_ENV is not specified
# then we set it to a default
if test -z "$ADAMANT_PYTHON_ENV" # ie. ~/.py_env
then
    export ADAMANT_PYTHON_ENV=$HOME/.py_env
fi

# See if the python environment already exists, if it does
# then use it. Else, create it, and then use it.
py_activate=$ADAMANT_PYTHON_ENV/bin/activate
if test -f "$py_activate"
then
    . $py_activate
else
    echo "Setting up python environment in $ADAMANT_PYTHON_ENV..."
    python3 -m venv $ADAMANT_PYTHON_ENV
    . $py_activate
    pip3 install --upgrade pip
    pip3 install wheel

    # Install all packages in env/requirements*.txt files in adamant/
    # and any project dirs in the paths
    for path in "${paths[@]}"; do
        # Install any python dependencies.
        files=$(find "$path/env" -name 'requirements*.txt' 2>/dev/null)

        # Check if find returned any files
        if [ -n "$files" ]; then
            for file in $files; do
                echo "Installing python dependencies from $file"
                pip3 install -r "$file"
            done
        else
            echo "No python requirements files found in $path/env"
        fi
    done

    echo "Done."
fi

# Set up path:
GROUND_BIN=$ADAMANT_DIR/gnd/bin
export PATH=$GROUND_BIN:$PATH

# Some other variables needed by python configuration:
export SCHEMAPATH=$ADAMANT_DIR/gen/schemas
export TEMPLATEPATH=$ADAMANT_DIR/gen/templates

# Make temp directory for build system
ADAMANT_TMP_DIR=`mktemp -d`
ADAMANT_TMP_DIR=$ADAMANT_TMP_DIR".adamant"
export ADAMANT_TMP_DIR
mkdir -p $ADAMANT_TMP_DIR

# Only initialize BUILD_ROOTS if it was previously unset
if [ -z "${BUILD_ROOTS+x}" ]; then
    BUILD_ROOTS=""
    build_roots_enabled=true
else
    build_roots_enabled=false
fi

# Iterate through each path and print them out
echo ""
echo "Configuring build roots: ${paths[@]}"
for path in "${paths[@]}"; do
    echo "Setting up $path...  "
    cd $path

    # Add path to the build root paths, if it was not previously
    # set by the user. If that is the case, we respect what was
    # previously set.
    if [ "$build_roots_enabled" = true ]; then
        if [ -n "$BUILD_ROOTS" ]; then
            BUILD_ROOTS="$BUILD_ROOTS:$path"
        else
            BUILD_ROOTS="$path"
        fi
    fi

    # Mark path as safe git directory if it is not already marked.
    if ! git config --global --get-regexp '^safe\.directory' | grep -q "^safe\.directory $path$"; then
        git config --global --add safe.directory "$path"
    fi

    if [ -f "$path/alire.toml" ]; then
      # Set up alire configuration if it is not yet set up.
      echo "Building alire dependencies..."
      if [ -f "alire.toml" ] && [ ! -f "${HOME}/.initialized" ]; then
          # Force recheck of alire dependencies on first login
          touch alire.toml
      fi
      alr -n build --release

      # This runs "export GPR_PROJECT_PATH=etc" which sets the GPR_PROJECT_PATH
      # to whatever alr thinks it should be for the Adamant project crate.
      # This allows the Adamant build system to then use gprbuild in the same way
      # that alr would.
      #
      # Also update PATH. Alire will include the current PATH set by the Adamant
      # environment plus some alire specific paths.
      #
      eval `alr -n printenv | grep PATH`

      # Set up the LD_LIBRARY_PATH so that it also includes the libraries that come
      # with the alr native compiler.
      eval `alr -n printenv | grep GNAT_NATIVE_ALIRE_PREFIX`
      if [ -n "$GNAT_NATIVE_ALIRE_PREFIX" ]; then
          # Check if $GNAT_NATIVE_ALIRE_PREFIX/lib64 is already in LD_LIBRARY_PATH
          if [[ ":$LD_LIBRARY_PATH:" != *":$GNAT_NATIVE_ALIRE_PREFIX/lib64:"* ]]; then
              export LD_LIBRARY_PATH="$GNAT_NATIVE_ALIRE_PREFIX/lib64:$LD_LIBRARY_PATH"
          fi
      fi

      # Add Adamant and project repository GPR files to the GPR_PROJECT_PATH
      if [ -d "$path/redo/targets/gpr" ]; then
          export GPR_PROJECT_PATH="$GPR_PROJECT_PATH:$path/redo/targets/gpr"
      fi
    fi

    # Activate the local python configuration:
    . $ADAMANT_DIR/env/set_python_path.sh $path

    cd - &> /dev/null
done

# Export $BUILD_ROOTS if it was computed above and not
# previously set by the user.
if [ "$build_roots_enabled" = true ]; then
    export BUILD_ROOTS
fi

echo "Done."
echo ""
echo "-- Adamant Configuration --"
echo "ADAMANT_DIR=$ADAMANT_DIR"
echo "ADAMANT_CONFIGURATION_YAML=$ADAMANT_CONFIGURATION_YAML"
echo "ADAMANT_PYTHON_ENV=$ADAMANT_PYTHON_ENV"
echo ""
echo "Adamant environment activated successfully."
echo ""

# Signify the environment is set up
export ADAMANT_ENVIRONMENT_SET="yes"

# Adding redo tab completion feature to shell
. $ADAMANT_DIR/env/redo_completion.sh
