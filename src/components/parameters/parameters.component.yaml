---
description: |
  The Parameters Component is responsible for staging, updating, and reporting the values of the ``active" parameters being used in the system. The component does not contain a parameter table itself. Instead it acts as an interface for the rest of the system to component's internal staged parameters. The component allows the staging and updating of parameters through a table upload (via Memory_Region_T_Recv_Async) or updating of individual parameter values by command. The component also provides a command to fetch all of the parameters held within components and produce a packet with the fetched values. The component can be configured to produce this packet automatically any time a parameter change is requested.
execution: active
init:
  description: "This init function provides the a list of parameter entries that describe the layout of the parameter table in memory. Calling this function also provides memory allocation for the parameter manager's internal parameter table. Preallocated memory can be provided via the \"bytes\" access type. Note the size of the preallocated memory MUST match the size of the parameter table exactly, as defined in the parameter_Entries parameter. If you would like to allocate the internal memory on the heap then \"bytes\" can be set to null."
  parameters:
    - name: parameter_Table_Entries
      type: Parameters_Component_Types.Parameter_Table_Entry_List_Access
      description: "A pointer to an autocoded list of parameter table entries. This table tells the parameter manager how the parameters are laid out in memory, so that it knows how to construct parameter types to update downstream components."
    - name: dump_Parameters_On_Change
      type: Boolean
      description: If set to True, the component will dump the current parameter values any time a command or memory region is received to alter one or more parameter values. If set to False, parameters will only be dumped when requested by command.
      default: "False"
connectors:
  - description: The arrayed parameter request connector. Parameters stages, updates, and fetches are sent out this connector and a status is returned.
    type: Parameter_Update.T
    kind: provide
    count: 0
  - description: This is the command recieve connector.
    type: Command.T
    kind: recv_async
  - description: This connector is used to send command responses.
    type: Command_Response.T
    kind: send
  - description: When a memory region is received on this connector it can either be a parameter table that is used to stage and update the parameters of all connected components, or it can be a memory region that is used to store the current value of the parameters stored within the component. The operation field determines which logic is run. For either operation, the memory region length MUST match the length of the managed parameter table, otherwise the update will not be processed.
    type: Parameters_Memory_Region.T
    kind: recv_async
  - description: After a memory region is received on the Memory_Region_T_Recv_Async connector and then processed, it is released via a call to this connector. A status is also returned, so the downstream component can determine if the parameter update was successful or not.
    type: Parameters_Memory_Region_Release.T
    kind: send
  - description: The parameter packet connector. A copy of the active parameters is dumped via this connector.
    type: Packet.T
    kind: send
  - description: Events are sent out of this connector.
    type: Event.T
    kind: send
  - description: The system time is retrieved via this connector.
    return_type: Sys_Time.T
    kind: get
