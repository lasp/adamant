from models.packets import packets, packet
from models.exceptions import ModelException
from util import model_loader
from util import redo


# This model is a specialized packet suite for the Parameters packet. This
# class inherits from the normal packets model but adds some extra functionality
# needed to the parameters packet. In particular, the parmaeters packet's
# type is derived from data within the assembly that the packet is a part of. The
# type itself gets filled in in the "load_assembly" method.
class parameters_packets(packets):
    # This is just a "decorated" packet object, so make sure everyone treats it like that.
    def submodel_name(self):
        return "packets"

    def set_assembly(self, assembly):
        # Set assembly:
        self.assembly = assembly

        # Stuff the Parameters packet type with the autogenerated type based on the
        # assembly. Even though this packed record is not used by the FSW, this will
        # allow the Parameters packet format to be available for decoding by ground tools
        # using the standard method of packed records.
        for key, pkt in self.entities.items():
            # Handle a Parameters component.
            if (
                pkt.suite.component.name == "Parameters"
                and pkt.name == "Active_Parameters"
            ):
                # First, lets get the path to the model file that will be the type for this packet:
                param_table = self.component.init.get_parameter_value(
                    "parameter_Table_Entries"
                )
                param_table_package = param_table.split(".")[0]
                model_name = param_table_package + "_record"
                model_path = model_loader.get_model_file_path(
                    model_name, model_types=["record"]
                )
                if not model_path:
                    raise ModelException(
                        "Could not find Active_Parameters packet type model file: '"
                        + model_name
                        + "'."
                    )

                # Make sure the model file has been autogenerated. Note that this causes a circular
                # dependency loop if shallow_load is not set to True in the generator
                # for the packet type.
                redo.redo_ifchange(model_path)

                # Now replace the packet by a new packet with the autogenerated type.
                self.entities[key] = packet(
                    name=pkt.name,
                    type=model_name + ".T",
                    description=pkt.description,
                    id=pkt.id,
                    suite=pkt.suite,
                )

                # Let's also add the type to our suite and component's complex types:
                self.type_models.append(self.entities[key].type_model)
                self.component.complex_types[
                    self.entities[key].type_model.name
                ] = self.entities[key].type_model
            # Handle a component other than the Parameters component that shares the parameter table type.
            elif pkt.name.endswith("Parameters"):
                # First, lets get the path to the model file that will be the type for this packet:
                model_path = None
                for comp in self.assembly.components.values():
                    if comp.name == "Parameters":
                        param_table = comp.init.get_parameter_value(
                            "parameter_Table_Entries"
                        )
                        param_table_package = param_table.split(".")[0]
                        model_name = param_table_package + "_record"
                        model_path = model_loader.get_model_file_path(
                            model_name, model_types=["record"]
                        )
                        if not model_path:
                            raise ModelException(
                                "Could not find Active_Parameters packet type model file: '"
                                + model_name
                                + "'."
                            )

                if not model_path:
                    raise ModelException(
                        "Could not find Parameters component in assembly."
                    )

                # Make sure the model file has been autogenerated. Note that this causes a circular
                # dependency loop if shallow_load is not set to True in the generator
                # for the packet type.
                redo.redo_ifchange(model_path)

                # Now replace the packet by a new packet with the autogenerated type.
                self.entities[key] = packet(
                    name=pkt.name,
                    type=model_name + ".T",
                    description=pkt.description,
                    id=pkt.id,
                    suite=pkt.suite,
                )

        # Call the base class version:
        super(parameters_packets, self).set_assembly(assembly)
