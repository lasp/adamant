---
description: |
  This is the Time at Tone Master component. TaT is a protocol used to sync a slave clock to a master clock. Two messages are sent from the master to the slave component. First a 'time at tone' message is sent which provides the slave clock with the time that should be stuffed to its clock when the tone message is received. Then a tone message is sent at the appropriate time and the slave clock is updated. This component implements the master side of the protocol. This component outputs the time message and the tone as Tick.T send connectors. This design is intended to be generic enough to implement time at tone in many different manners on the other end of these connectors. For instance, you could convert the time message Tick.T to a CCSDS packet and the tone Tick.T to a GPIO pulse.
execution: passive
init:
  parameters:
    - name: Wait_Time_Ms
      type: Natural
      description: Number of milliseconds the master waits between the sending of the time message and the sending of the tone message. This is implemented internally by an Ada 'delay until' statement.
    - name: Sync_Period
      type: Positive
      default: "1"
      description: The number of ticks between sending clock sync messages.
    - name: Enabled_State
      type: Tat_State.Tat_State_Type
      default: "Tat_State.Enabled"
      description: Is time at tone enabled or disabled by default at startup.
connectors:
  - description: Tick used to trigger the sending of time messages.
    type: Tick.T
    kind: recv_sync
  - description: Time message send connector, sends a message with the time the tone message will be sent.
    type: Tick.T
    name: Time_Message_Send
    kind: send
  - description: Tone message send connector.
    type: Tick.T
    name: Tone_Message_Send
    kind: send
  - description: Used to get system time, used by the master version of the component to get the current time.
    return_type: Sys_Time.T
    kind: get
  - description: The command receive connector.
    type: Command.T
    kind: recv_sync
  - description: This connector is used to register the components commands with the command router component.
    type: Command_Response.T
    kind: send
  - description: The data product invoker connector
    type: Data_Product.T
    kind: send
  - description: The event send connector
    type: Event.T
    kind: send
