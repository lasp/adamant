---
description: The Interrupt Pender is used to block the execution of a calling component until an interrupt is received. When an attached component calls the Wait_On_Interrupt_Data_Type_Return connector its execution is halted. When an interrupt is received, the Interrupt Pender passes a user-defined interrupt data type, populated by a user-defined interrupt handler, to the blocked component, releasing it to continue its execution. Note, only one external component should be attached to the Wait_On_Interrupt_Data_Type_Return connector or a runtime error will be thrown by the Ravenscar runtime system due to two tasks waiting on a single protected entry.
execution: passive
with:
  - Interrupt_Handlers
generic:
  description: The Interrupt Pender is parameterized by the Interrupt_Data_Type. The instantiation of this type is often determined by what data needs to be collected during an interrupt and how a connected component intends to process that data. This type is a user defined type that is passed into the user's custom interrupt handler as an in-out parameter and then passed to a downstream components out of the Wait_On_Interrupt_Data_Type_Return connector. Usually, this type will be used to capture data related to an interrupt in the interrupt handler. Often, a timestamp, relating when the interrupt occurred, will be included in this custom type. The Interrupt Pender will automatically insert the timestamp into the custom type if the second generic parameter, the Set_Interrupt_Data_Time procedure, is provided.
  parameters:
    - name: Interrupt_Data_Type
      description: The user's custom datatype that is is set in the custom interrupt handler and then passed to downstream components. If you do not foresee needing to collect specific data in the interrupt handler for the downstream component, consider using the Tick.T type, which includes a timestamp and a count.
    - name: Set_Interrupt_Data_Time
      formal_type: "with procedure Set_Interrupt_Data_Time (Interrupt_Data : in out Interrupt_Data_Type; Time : in Sys_Time.T) is null;"
      optional: True
      description: This is an optional generic parameter that is used if the Interrupt_Data_Type includes a timestamp which should be filled in when an interrupt occurs. This parameter is a user defined procedure that, given a time, copies that time to the Interrupt_Data_Type. If this parameter is not provided, then time will not be set in the Interrupt_Data_Type. In this case, the user should not connect the Sys_Time_T_Get connector to avoid the CPU overhead of fetching a time that is never used. Note, if you are using Tick.T for the Interrupt_Data_Type, consider using the Handler procedure in the Tick_Interrupt_Handler package to instantiate this parameter.
preamble: |
  -- Define the custom interrupt handling package type:
  package Custom_Interrupt_Handler_Package is new Interrupt_Handlers (Interrupt_Data_Type);
discriminant:
  parameters:
    - name: custom_Interrupt_Procedure
      type: Custom_Interrupt_Handler_Package.Interrupt_Procedure_Type
      description: A custom procedure to be called within the interrupt handler. The null procedure can be used here if no specific behavior is desired.
interrupts:
  - name: interrupt
    description: This component counts the number of times this interrupt occurs.
connectors:
  - description: Calling this connector causes execution to block until an interrupt occurs. Note, only one external component should be attached to this connector or a runtime error will be thrown by the Ravenscar runtime system due to two tasks waiting on a single protected entry.
    name: Wait_On_Interrupt_Data_Type_Return
    return_type: Interrupt_Data_Type
    kind: return
  - description: The system time is retrieved via this connector.
    return_type: Sys_Time.T
    kind: get
