with Interfaces; use Interfaces;

package body Crc_16 is

   -- Function to compute CRC on a variable array of bytes. A CRC of the whole
   -- array is computed.
   function Compute_Crc_16 (Bytes : in Basic_Types.Byte_Array; Seed : in Crc_16_Type := (0 => 16#FF#, 1 => 16#FF#)) return Crc_16_Type is

      -- Constants:
      type Byte_Array_Byte_Index is array (Basic_Types.Byte) of Basic_Types.Byte;

      Low_Crc : constant Byte_Array_Byte_Index := (
         16#00#, 16#21#, 16#42#, 16#63#, 16#84#, 16#a5#, 16#c6#, 16#e7#, 16#08#, 16#29#, 16#4a#, 16#6b#, 16#8c#,
         16#ad#, 16#ce#, 16#ef#, 16#31#, 16#10#, 16#73#, 16#52#, 16#b5#, 16#94#, 16#f7#, 16#d6#, 16#39#, 16#18#,
         16#7b#, 16#5a#, 16#bd#, 16#9c#, 16#ff#, 16#de#, 16#62#, 16#43#, 16#20#, 16#01#, 16#e6#, 16#c7#, 16#a4#,
         16#85#, 16#6a#, 16#4b#, 16#28#, 16#09#, 16#ee#, 16#cf#, 16#ac#, 16#8d#, 16#53#, 16#72#, 16#11#, 16#30#,
         16#d7#, 16#f6#, 16#95#, 16#b4#, 16#5b#, 16#7a#, 16#19#, 16#38#, 16#df#, 16#fe#, 16#9d#, 16#bc#, 16#c4#,
         16#e5#, 16#86#, 16#a7#, 16#40#, 16#61#, 16#02#, 16#23#, 16#cc#, 16#ed#, 16#8e#, 16#af#, 16#48#, 16#69#,
         16#0a#, 16#2b#, 16#f5#, 16#d4#, 16#b7#, 16#96#, 16#71#, 16#50#, 16#33#, 16#12#, 16#fd#, 16#dc#, 16#bf#,
         16#9e#, 16#79#, 16#58#, 16#3b#, 16#1a#, 16#a6#, 16#87#, 16#e4#, 16#c5#, 16#22#, 16#03#, 16#60#, 16#41#,
         16#ae#, 16#8f#, 16#ec#, 16#cd#, 16#2a#, 16#0b#, 16#68#, 16#49#, 16#97#, 16#b6#, 16#d5#, 16#f4#, 16#13#,
         16#32#, 16#51#, 16#70#, 16#9f#, 16#be#, 16#dd#, 16#fc#, 16#1b#, 16#3a#, 16#59#, 16#78#, 16#88#, 16#a9#,
         16#ca#, 16#eb#, 16#0c#, 16#2d#, 16#4e#, 16#6f#, 16#80#, 16#a1#, 16#c2#, 16#e3#, 16#04#, 16#25#, 16#46#,
         16#67#, 16#b9#, 16#98#, 16#fb#, 16#da#, 16#3d#, 16#1c#, 16#7f#, 16#5e#, 16#b1#, 16#90#, 16#f3#, 16#d2#,
         16#35#, 16#14#, 16#77#, 16#56#, 16#ea#, 16#cb#, 16#a8#, 16#89#, 16#6e#, 16#4f#, 16#2c#, 16#0d#, 16#e2#,
         16#c3#, 16#a0#, 16#81#, 16#66#, 16#47#, 16#24#, 16#05#, 16#db#, 16#fa#, 16#99#, 16#b8#, 16#5f#, 16#7e#,
         16#1d#, 16#3c#, 16#d3#, 16#f2#, 16#91#, 16#b0#, 16#57#, 16#76#, 16#15#, 16#34#, 16#4c#, 16#6d#, 16#0e#,
         16#2f#, 16#c8#, 16#e9#, 16#8a#, 16#ab#, 16#44#, 16#65#, 16#06#, 16#27#, 16#c0#, 16#e1#, 16#82#, 16#a3#,
         16#7d#, 16#5c#, 16#3f#, 16#1e#, 16#f9#, 16#d8#, 16#bb#, 16#9a#, 16#75#, 16#54#, 16#37#, 16#16#, 16#f1#,
         16#d0#, 16#b3#, 16#92#, 16#2e#, 16#0f#, 16#6c#, 16#4d#, 16#aa#, 16#8b#, 16#e8#, 16#c9#, 16#26#, 16#07#,
         16#64#, 16#45#, 16#a2#, 16#83#, 16#e0#, 16#c1#, 16#1f#, 16#3e#, 16#5d#, 16#7c#, 16#9b#, 16#ba#, 16#d9#,
         16#f8#, 16#17#, 16#36#, 16#55#, 16#74#, 16#93#, 16#b2#, 16#d1#, 16#f0#
      );

      High_Crc : constant Byte_Array_Byte_Index := (
         16#00#, 16#10#, 16#20#, 16#30#, 16#40#, 16#50#, 16#60#, 16#70#, 16#81#, 16#91#, 16#a1#, 16#b1#, 16#c1#,
         16#d1#, 16#e1#, 16#f1#, 16#12#, 16#02#, 16#32#, 16#22#, 16#52#, 16#42#, 16#72#, 16#62#, 16#93#, 16#83#,
         16#b3#, 16#a3#, 16#d3#, 16#c3#, 16#f3#, 16#e3#, 16#24#, 16#34#, 16#04#, 16#14#, 16#64#, 16#74#, 16#44#,
         16#54#, 16#a5#, 16#b5#, 16#85#, 16#95#, 16#e5#, 16#f5#, 16#c5#, 16#d5#, 16#36#, 16#26#, 16#16#, 16#06#,
         16#76#, 16#66#, 16#56#, 16#46#, 16#b7#, 16#a7#, 16#97#, 16#87#, 16#f7#, 16#e7#, 16#d7#, 16#c7#, 16#48#,
         16#58#, 16#68#, 16#78#, 16#08#, 16#18#, 16#28#, 16#38#, 16#c9#, 16#d9#, 16#e9#, 16#f9#, 16#89#, 16#99#,
         16#a9#, 16#b9#, 16#5a#, 16#4a#, 16#7a#, 16#6a#, 16#1a#, 16#0a#, 16#3a#, 16#2a#, 16#db#, 16#cb#, 16#fb#,
         16#eb#, 16#9b#, 16#8b#, 16#bb#, 16#ab#, 16#6c#, 16#7c#, 16#4c#, 16#5c#, 16#2c#, 16#3c#, 16#0c#, 16#1c#,
         16#ed#, 16#fd#, 16#cd#, 16#dd#, 16#ad#, 16#bd#, 16#8d#, 16#9d#, 16#7e#, 16#6e#, 16#5e#, 16#4e#, 16#3e#,
         16#2e#, 16#1e#, 16#0e#, 16#ff#, 16#ef#, 16#df#, 16#cf#, 16#bf#, 16#af#, 16#9f#, 16#8f#, 16#91#, 16#81#,
         16#b1#, 16#a1#, 16#d1#, 16#c1#, 16#f1#, 16#e1#, 16#10#, 16#00#, 16#30#, 16#20#, 16#50#, 16#40#, 16#70#,
         16#60#, 16#83#, 16#93#, 16#a3#, 16#b3#, 16#c3#, 16#d3#, 16#e3#, 16#f3#, 16#02#, 16#12#, 16#22#, 16#32#,
         16#42#, 16#52#, 16#62#, 16#72#, 16#b5#, 16#a5#, 16#95#, 16#85#, 16#f5#, 16#e5#, 16#d5#, 16#c5#, 16#34#,
         16#24#, 16#14#, 16#04#, 16#74#, 16#64#, 16#54#, 16#44#, 16#a7#, 16#b7#, 16#87#, 16#97#, 16#e7#, 16#f7#,
         16#c7#, 16#d7#, 16#26#, 16#36#, 16#06#, 16#16#, 16#66#, 16#76#, 16#46#, 16#56#, 16#d9#, 16#c9#, 16#f9#,
         16#e9#, 16#99#, 16#89#, 16#b9#, 16#a9#, 16#58#, 16#48#, 16#78#, 16#68#, 16#18#, 16#08#, 16#38#, 16#28#,
         16#cb#, 16#db#, 16#eb#, 16#fb#, 16#8b#, 16#9b#, 16#ab#, 16#bb#, 16#4a#, 16#5a#, 16#6a#, 16#7a#, 16#0a#,
         16#1a#, 16#2a#, 16#3a#, 16#fd#, 16#ed#, 16#dd#, 16#cd#, 16#bd#, 16#ad#, 16#9d#, 16#8d#, 16#7c#, 16#6c#,
         16#5c#, 16#4c#, 16#3c#, 16#2c#, 16#1c#, 16#0c#, 16#ef#, 16#ff#, 16#cf#, 16#df#, 16#af#, 16#bf#, 16#8f#,
         16#9f#, 16#6e#, 16#7e#, 16#4e#, 16#5e#, 16#2e#, 16#3e#, 16#0e#, 16#1e#
      );

      -- Local parity variables:
      High_Parity : Basic_Types.Byte := Seed (Crc_16_Type'First);
      Low_Parity : Basic_Types.Byte := Seed (Crc_16_Type'First + 1);
   begin
      for Idx in Bytes'Range loop
         declare
            K : constant Basic_Types.Byte := Bytes (Idx) xor High_Parity;
         begin
            High_Parity := Low_Parity xor High_Crc (K);
            Low_Parity := Low_Crc (K);
         end;
      end loop;

      return (Crc_16_Type'First => High_Parity, Crc_16_Type'First + 1 => Low_Parity);
   end Compute_Crc_16;

   function Compute_Crc_16 (Byte_Ptr : in Byte_Array_Pointer.Instance; Seed : in Crc_16_Type := (0 => 16#FF#, 1 => 16#FF#)) return Crc_16_Type is
      use Byte_Array_Pointer;
      subtype Safe_Byte_Array_Type is Basic_Types.Byte_Array (0 .. Length (Byte_Ptr) - 1);
      -- Perform overlay manually instead of using Byte_Array_Pointer.Pointer to avoid Byte_Array_Access range checking.
      -- A null (address 0x0) Byte_Array_Access is not allowed in Ada, but we want to be able to CRC at address zero.
      Safe_Byte_Array : Safe_Byte_Array_Type with Import, Convention => Ada, Address => Address (Byte_Ptr);
   begin
      return Compute_Crc_16 (Safe_Byte_Array, Seed);
   end Compute_Crc_16;

end Crc_16;
