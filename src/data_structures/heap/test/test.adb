with Ada.Text_IO; use Ada.Text_IO;
with Heap;

procedure Test is
   -- Define the data type to store on the heap:
   type Data is record
      Pri : Natural; -- priority
      Value : Natural;
   end record;

   function Greater_Than (A, B : in Data) return Boolean is
   begin
      return A.Pri > B.Pri;
   end Greater_Than;

   function Equal_To (A, B : in Data) return Boolean is
   begin
      return A.Pri = B.Pri;
   end Equal_To;

   -- Define the heap:
   package Data_Heap is new Heap (Data, Greater_Than, Equal_To);
   My_Heap : Data_Heap.Instance;
   My_Data : Data;
begin
   Put ("Initialize heap test... ");
   My_Heap.Init (Maximum_Size => 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Get_Maximum_Size = 0);
   pragma Assert (My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   Put_Line ("passed.");

   Put ("Testing empty... ");
   pragma Assert (My_Heap.Pop (Element => My_Data) = False);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   Put_Line ("passed.");

   Put ("Testing push... ");
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 15)) = True);
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Get_Maximum_Size = 1);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 15)) = True);
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Get_Maximum_Size = 2);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 15)) = True);
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Get_Maximum_Size = 3);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 15)) = True);
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Get_Maximum_Size = 4);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 15)) = True);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (My_Heap.Is_Full);
   Put_Line ("passed.");

   Put ("Testing full... ");
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 14)) = False);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 13)) = False);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (My_Heap.Is_Full);
   Put_Line ("passed.");

   Put ("Testing pop... ");
   pragma Assert (My_Heap.Peek (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Peek (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Peek (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Peek (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Peek (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (not My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Peek (Element => My_Data) = False);
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   pragma Assert (My_Heap.Pop (Element => My_Data) = False);
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   pragma Assert (My_Heap.Is_Empty);
   pragma Assert (not My_Heap.Is_Full);
   Put_Line ("passed.");

   Put ("Testing priority... ");
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 7)) = True);
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 19)) = True);
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Push (Element => (Pri => 500, Value => 12)) = True);
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Push (Element => (Pri => 57, Value => 32)) = True);
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Push (Element => (Pri => 5, Value => 96)) = True);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 500, Value => 12));
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 57, Value => 32));
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 5, Value => 96));
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 19));
   pragma Assert (My_Heap.Get_Size = 0);
   Put_Line ("passed.");

   Put ("Testing same priority... ");
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 7)) = True);
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 19)) = True);
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 12)) = True);
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 1_000)) = True);
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 96)) = True);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 19));
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 12));
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 1_000));
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 96));
   pragma Assert (My_Heap.Get_Size = 0);
   Put_Line ("passed.");

   Put ("Testing mixed priority... ");
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 7)) = True);
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 19)) = True);
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Push (Element => (Pri => 56, Value => 0)) = True);
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Push (Element => (Pri => 0, Value => 32)) = True);
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Push (Element => (Pri => 1_000, Value => 1)) = True);
   pragma Assert (My_Heap.Get_Size = 5);
   pragma Assert (My_Heap.Get_Capacity = 5);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 1_000, Value => 1));
   pragma Assert (My_Heap.Get_Size = 4);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (My_Heap.Get_Size = 3);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 56, Value => 0));
   pragma Assert (My_Heap.Get_Size = 2);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 19));
   pragma Assert (My_Heap.Get_Size = 1);
   pragma Assert (My_Heap.Pop (Element => My_Data) = True);
   pragma Assert (My_Data = (Pri => 0, Value => 32));
   pragma Assert (My_Heap.Get_Size = 0);
   Put_Line ("passed.");

   Put ("Destroy heap test... ");
   pragma Assert (My_Heap.Get_Maximum_Size = 5);
   My_Heap.Destroy;
   pragma Assert (My_Heap.Get_Size = 0);
   pragma Assert (My_Heap.Get_Maximum_Size = 0);
   Put_Line ("passed.");
end Test;
