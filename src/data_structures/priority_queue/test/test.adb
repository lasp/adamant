with Ada.Text_IO; use Ada.Text_IO;
with Priority_Queue;
with Basic_Types; use Basic_Types;
with Interfaces; use Interfaces;

procedure Test is
   -- Define the data type to store on the queue:
   type Data is record
      Pri : Natural; -- priority
      Value : Natural;
   end record;

   function Data_Greater_Than (A, B : in Data) return Boolean is
   begin
      return A.Pri > B.Pri;
   end Data_Greater_Than;

   function Data_Equal_To (A, B : in Data) return Boolean is
   begin
      return A.Pri = B.Pri;
   end Data_Equal_To;

   -- Define the queue:
   package Data_Priority_Queue is new Priority_Queue (Data, Data_Greater_Than, Data_Equal_To);
   use Data_Priority_Queue;
   My_Queue : Data_Priority_Queue.Instance;
   My_Data : Data;
   Bytes : Basic_Types.Byte_Array (0 .. 3);
   Bytes_Returned : Natural;
begin
   Put ("Initialize queue test... ");
   My_Queue.Init (Element_Size => 4, Depth => 5);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 5);
   pragma Assert (My_Queue.Num_Bytes_Used = 0);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 0);
   pragma Assert (My_Queue.Current_Percent_Used = 0);
   pragma Assert (My_Queue.Max_Percent_Used = 0);
   pragma Assert (My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   Put_Line ("passed.");

   Put ("Testing empty... ");
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Empty);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Empty);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 5);
   pragma Assert (My_Queue.Num_Bytes_Used = 0);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 0);
   pragma Assert (My_Queue.Current_Percent_Used = 0);
   pragma Assert (My_Queue.Max_Percent_Used = 0);
   pragma Assert (My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   Put_Line ("passed.");

   Put ("Testing push... ");
   -- Test no data.
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (2 .. 1 => 0)) = Success);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 4);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 1);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 1);
   pragma Assert (My_Queue.Current_Percent_Used = 100 / 5);
   pragma Assert (My_Queue.Max_Percent_Used = 100 / 5);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 3);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 2);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 2);
   pragma Assert (My_Queue.Current_Percent_Used = 200 / 5);
   pragma Assert (My_Queue.Max_Percent_Used = 200 / 5);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 2);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 3);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 3);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (300 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = Byte (Natural (300 / 5)));
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 1);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 4);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 4);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (400 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = Byte (Natural (400 / 5)));
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 0);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Current_Percent_Used = 100);
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (My_Queue.Is_Full);
   Put_Line ("passed.");

   Put ("Testing full... ");
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Full);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 0);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Current_Percent_Used = 100);
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (My_Queue.Is_Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 0, Value => 15), Bytes => (1, 2, 3, 4)) = Full);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 0);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Current_Percent_Used = 100);
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (My_Queue.Is_Full);
   Put_Line ("passed.");

   Put ("Testing pop... ");
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 0); -- empty element
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 0);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 5);
   pragma Assert (My_Queue.Current_Percent_Used = 100);
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 0);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 1);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 4);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (400 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 1);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 4);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (400 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes = (1, 2, 3, 4));
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 2);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 3);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (300 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 2);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 3);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (300 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes = (1, 2, 3, 4));
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 3);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 2);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (200 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 3);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 2);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (200 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes = (1, 2, 3, 4));
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 4);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 1);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (100 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 4);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 1);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (100 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (not My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 0, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes = (1, 2, 3, 4));
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 5);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 0);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (0 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Empty);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 5);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 0);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (0 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Empty);
   pragma Assert (My_Queue.Num_Bytes_Free = 4 * 5);
   pragma Assert (My_Queue.Num_Bytes_Used = 4 * 0);
   pragma Assert (My_Queue.Current_Percent_Used = Byte (Natural (0 / 5)));
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (My_Queue.Is_Empty);
   pragma Assert (not My_Queue.Is_Full);
   Put_Line ("passed.");

   Put ("Testing priority... ");
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 15), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 1_000, Value => 14), Bytes => (5, 6, 7)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 9, Value => 13), Bytes => (8, 9)) = Success);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 1_000, Value => 14));
   pragma Assert (Bytes_Returned = 3);
   pragma Assert (My_Queue.Push (Priority => (Pri => 1_001, Value => 9), Bytes => (0 => 10)) = Success);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 1_001, Value => 9));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 10));
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 1_000, Value => 14));
   pragma Assert (Bytes_Returned = 3);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 1_000, Value => 14));
   pragma Assert (Bytes_Returned = 3);
   pragma Assert (Bytes (0 .. 2) = (5, 6, 7));
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 15));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes = (1, 2, 3, 4));
   pragma Assert (My_Queue.Push (Priority => (Pri => 8, Value => 1), Bytes => (0 => 10)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 7, Value => 2), Bytes => (0 => 11)) = Success);
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 9, Value => 13));
   pragma Assert (Bytes_Returned = 2);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 9, Value => 13));
   pragma Assert (Bytes_Returned = 2);
   pragma Assert (Bytes (0 .. 1) = (8, 9));
   pragma Assert (My_Queue.Peek (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned) = Success);
   pragma Assert (My_Data = (Pri => 8, Value => 1));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 8, Value => 1));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 10));
   pragma Assert (My_Queue.Push (Priority => (Pri => 19, Value => 3), Bytes => (0 => 14)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 20, Value => 4), Bytes => (0 => 15)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 21, Value => 5), Bytes => (0 => 16)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 22, Value => 6), Bytes => (0 => 17)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 23, Value => 7), Bytes => (0 => 18)) = Full);
   pragma Assert (My_Queue.Push (Priority => (Pri => 23, Value => 7), Bytes => (1 .. 0 => 18)) = Full);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 22, Value => 6));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 17));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 21, Value => 5));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 16));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 20, Value => 4));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 15));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 19, Value => 3));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 14));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 7, Value => 2));
   pragma Assert (Bytes_Returned = 1);
   pragma Assert (Bytes (0 .. 0) = (0 => 11));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Empty);
   Put_Line ("passed.");

   Put ("Testing same priority... ");
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 8), Bytes => (2, 3, 4)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 9), Bytes => (3, 4)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 10), Bytes => (18, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes (0 .. 3) = (1, 2, 3, 4));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 8));
   pragma Assert (Bytes_Returned = 3);
   pragma Assert (Bytes (0 .. 2) = (2, 3, 4));
   pragma Assert (My_Queue.Push (Priority => (Pri => 57, Value => 11), Bytes => (18, 2, 3)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 12), Bytes => (18, 2)) = Success);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 57, Value => 11));
   pragma Assert (Bytes_Returned = 3);
   pragma Assert (Bytes (0 .. 2) = (18, 2, 3));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 9));
   pragma Assert (Bytes_Returned = 2);
   pragma Assert (Bytes (0 .. 1) = (3, 4));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 10));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes (0 .. 3) = (18, 2, 3, 4));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 12));
   pragma Assert (Bytes_Returned = 2);
   pragma Assert (Bytes (0 .. 1) = (18, 2));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes) = Empty);
   Put_Line ("passed.");

   Put ("Testing error... ");
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 2)) = Too_Small);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 1)) = Too_Small);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 0)) = Too_Small);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 3)) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes (0 .. 3) = (1, 2, 3, 4));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 3)) = Empty);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4)) = Success);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4, 5)) = Too_Large);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4, 5, 6)) = Too_Large);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4, 5, 6, 7)) = Too_Large);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 4, 5, 6, 7, 8)) = Too_Large);
   pragma Assert (My_Queue.Push (Priority => (Pri => 56, Value => 7), Bytes => (1, 2, 3, 6)) = Success);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 3)) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes (0 .. 3) = (1, 2, 3, 4));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 2)) = Too_Small);
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (0 .. 3)) = Success);
   pragma Assert (My_Data = (Pri => 56, Value => 7));
   pragma Assert (Bytes_Returned = 4);
   pragma Assert (Bytes (0 .. 3) = (1, 2, 3, 6));
   pragma Assert (My_Queue.Pop (Priority => My_Data, Num_Bytes_Returned => Bytes_Returned, Bytes => Bytes (1 .. 0)) = Empty);
   Put_Line ("passed.");

   Put ("Destroy queue test... ");
   pragma Assert (My_Queue.Max_Percent_Used = 100);
   pragma Assert (My_Queue.Max_Num_Bytes_Used = 4 * 5);
   My_Queue.Destroy;
   Put_Line ("passed.");
end Test;
