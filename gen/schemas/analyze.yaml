---
# This schema describes the yaml format for defining how the CodePeer static analyzer
# should be run within a directory. All files in a directory are run with the same
# CodePeer configuration.
type: map
mapping:
  # A description for analyze file.
  description:
    type: str
    required: False
  #
  #  CodePeer Levels
  #
  #  You can configure CodePeer to perform its analysis at different levels via the -level switch,
  #  to tune the accuracy of analysis needed and depending on the size of the source code analyzed.
  #  "level" sets the level of analysis, which impacts both time and accuracy. Note that messages
  #  for lower levels are not necessarily a subset of those for higher levels.
  #
  # The default level is 2 and can be overriden via the "level" field.
  #
  # Level Description
  #
  # 0   Default level. Fast and local analysis performed via the Libadalang Checkers Integration, which does not run the core engine, so most switches are ignored.
  #     No code size or complexity limit.
  #
  # 1   In addition to running the checkers from level 0, also runs the core engine of codepeer, subprogram by subprogram. Implies -messages min -no-race-conditions
  #     -steps 30 -partition-memory-limit 1GB. No code size or complexity limit.
  #
  # 2   Analyze by groups of units. Slower analysis, more precise. Implies -messages min -no-race-conditions -steps 50 -partition-memory-limit 3GB.
  #     No code size or complexity limit.
  #
  # 3   Semi-global analysis. Units will be analyzed globally as much as possible, and an automatic partitioning is performed to complete the analysis within the
  #     memory constraints of the machine. Implies -steps 1000 -partition-memory-limit 4GB. Suitable for less than 1 million SLOC and subprograms with a cyclomatic
  #     complexity below 40.
  #
  # 4   Global analysis. Analyze all units together with no partitioning. May require large amounts of memory and time. Recommended only for very accurate and complete
  #     analysis to detect all potential cases of run-time errors exhaustively at the expense of many false positives. Implies -no-presumptions -messages max -gnateF
  #     -global -steps 2000 -method-timeout 3600. Suitable for less than 200K SLOC and subprograms with a cyclomatic complexity below 20.
  #
  level:
    type: int
    required: False
    range:
      min: 0
      max: 4
  # The CodePeer -message flag.
  #  Specify level of verbosity for generated messages. Default is normal.
  #  -messages min will filter most messages that are likely false alarms,
  #  while -messages max will display all possible errors.
  messages:
    type: str
    enum: ['min', 'normal', 'max']
    required: False
  # Specify other switches you want to include. Each should include the
  # leading dash(es), ie. "--be-messages=xxx"
  switches:
    seq:
      - type: str
    required: False
