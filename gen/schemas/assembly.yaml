---
# This schema describes the yaml format for an assembly.
type: map
mapping:
  # A description for the assembly.
  description:
    type: str
    required: False
  # Many "with" dependencies are automatically deduced and included by
  # the generator. If you want to manually add a "with" statement, you
  # can list the names of the packages here.
  with:
    seq:
      - type: str
    required: False
  # Any useful handcode to include in the .ads file can be included here.
  # You can think of this as inline Ada, which might be useful for declaring
  # custom enum types and the like. The code here is copied immediately
  # before the package spec definition.
  prepreamble:
    type: str
    required: False
  # Any useful handcode to include in the .ads file can be included here.
  # You can think of this as inline Ada, which might be useful for declaring
  # custom enum types and the like. The code here is copied immediately after
  # the package spec definition.
  preamble:
    type: str
    required: False
  # A list of subassemblies to include in this assembly. The names listed here
  # should just be the assembly name. For example:
  #
  # subassemblies:
  #   - core
  #   - comm
  #
  # would import the subassemblies from files named core.assembly.yaml and
  # comm.assembly.yaml.
  #
  # Make sure subassemblies are in the build path or an error will result.
  # Subassemblies can be used to split up large assembly files into smaller,
  # more managable files. This can facilitate reuse and ease assembly
  # maintenance.
  subassemblies:
    seq:
      - type: str
    required: False
  # The following can be use to set the ID bases of different assembly wide entities.
  # This can be used, for instance, to start all event IDs at 0x500, ex:
  # id_bases:
  #   - "event_Id_Base => 1280"
  #   - etc.
  id_bases:
    seq:
      - type: str
    required: False
  # A list of components to include in the assembly.
  components:
    seq:
      - type: map
        mapping:
          # The name of the component. It is recommended that you leave this
          # blank, as the autogenerated name is usually descriptive enough and
          # follows a convention.
          name:
            type: str
            required: False
          # Description of the component and its role in the assembly.
          description:
            type: str
            required: False
          # The component type.
          type:
            type: str
            required: True
          # The execution type of the component.
          #   active - the component is given an internal task on which to execute
          #   passive - the component is not given an internal task, and will only
          #             execute on the task of it's connector invokers.
          # Note: if not provided, the execution type defined in the component model
          # will be used. If the type defined in the component model is "either" then
          # an execution MUST be provided here.
          execution:
            type: str
            enum: ['active', 'passive']
            required: False
          # This is only required for active components. The priority number that
          # the component task should execute at.
          priority:
            type: int
            required: False
          # This is only required for active components. The stack size in bytes
          # that the component task should have.
          stack_size:
            type: int
            required: False
          # This is only required for active components. The secondary stack size in bytes
          # that the component task should have. The secondary stack is used to return
          # unconstrained types from function.
          secondary_stack_size:
            type: int
            required: False
          # If the component has generic types, the actual types that they should be
          # resolved to in the assembly should be provided here.
          generic_types:
            seq:
              - type: str
            required: False
          # If the component has values to fill in for the descriminant they should be
          # listed here as name value pairs, ie.
          #   "Name => Value"
          discriminant:
            seq:
              - type: str
            required: False
          # If the component has values to fill in during component base initialization they should be
          # listed here as name value pairs, ie.
          #   "Name => Value"
          init_base:
            seq:
              - type: str
            required: False
          # If the component has values to fill in during id base initialization they should be
          # listed here as name value pairs, ie.
          #   "Name => Value"
          set_id_bases:
            seq:
              - type: str
            required: False
          # If the component needs to map data dependencies to an external component's data product then
          # the data dependencies should be listed here with the corresponding data products and stale
          # limits. The IDs and stale limits for each data dependency will then be correctly set up at assembly
          # initialization.
          map_data_dependencies:
            seq:
              - type: map
                mapping:
                  # The name of the component's data dependency
                  data_dependency:
                    type: str
                    required: True
                  # The name of the data product to map the data dependency to in the form:
                  # "External_Component_Instance_Name.Data_Product_Name"
                  data_product:
                    type: str
                    required: True
                  # If the data product has a timestamp older than the current time (time reference)
                  # minus this stale limit in microseconds, then it will be considered stale. In this
                  # case, a stale status will be returned to the component upon parsing the data product.
                  # A stale_limit_us of zero indicates that the data product can never be stale, and
                  # in this case the stale-ness of the data product will not even be checked, thus a
                  # stale status will never be returned to the component upon parsing the data product.
                  stale_limit_us:
                    type: int
                    required: True
            required: False
          # If the component has values to fill in during component initialization they should be
          # listed here as name value pairs, ie.
          #   "Name => Value"
          init:
            seq:
              - type: str
            required: False
          # If the component has an internal subtask then it needs to be initialized here.
          subtasks:
            seq:
              - type: map
                mapping:
                  # The name of the subtask.
                  name:
                    type: str
                    required: True
                  # The priority number that the component subtask should execute at.
                  priority:
                    type: int
                    required: True
                  # The stack size in bytes that the component subtask should have.
                  stack_size:
                    type: int
                    required: True
                  # The secondary stack size in bytes that the component subtask should have. The secondary
                  # stack is used to return unconstrained types from function.
                  secondary_stack_size:
                    type: int
                    required: True
                  # Set to true if you do not want to start the subtask for this component. By default
                  # this is True:
                  disabled:
                    type: bool
                    required: False
                    default: False
            required: False
    # At least one component must be provided in the assembly.
    range:
      min: 1
    required: True
  # A list of connections to make between components in the assembly.
  connections:
    seq:
      - type: map
        mapping:
          # A description of this connection, and what it is for.
          description:
            type: str
            required: False
          # The from component name.
          from_component:
            type: str
            required: True
          # The from connector name.
          from_connector:
            type: str
            required: True
          # If the from connector is an arrayed connector, the array
          # index should be included here.
          from_index:
            type: int
            required: False
            range:
              min: 1
              max: 65535
          # The to component name.
          to_component:
            type: str
            required: True
          # The to connector name.
          to_connector:
            type: str
            required: True
          # If the to connector is an arrayed connector, the array
          # index should be included here.
          to_index:
            type: int
            required: False
            range:
              min: 1
              max: 65535
    required: False
