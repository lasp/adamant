disp("testing simple:");
disp("create simple:");
s = Simple_Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);
disp(s);
disp(s.to_tuple_string());
disp(s.to_byte_array());
disp(s.to_byte_string());
data = s.to_byte_array();
disp("create simple2:");
s2 = Simple_Array();
assert(s ~= s2);
disp(s2);
disp("fill simple2:");
s2 = s2.from_byte_array(data);
disp(s2);
assert(s == s2);
disp("passed.");
disp("");

disp("testing complex:");
disp("create complex:");
a = Aa(1, 2, 3);
c = Complex_Array(repmat(a, 1, 25));
disp(c);
disp(c.to_tuple_string());
disp(c.to_byte_array());
disp(c.to_byte_string());
data = c.to_byte_array();
disp("create complex2:");
c2 = Complex_Array();
assert(c ~= c2);
disp(c2);
disp("fill complex2:");
c2 = c2.from_byte_array(data);
disp(c2);
assert(c == c2);
disp("passed.");
disp("");

disp("testing eight:");
disp("create eight:");
yo = [1; 2; 3; 4; 5; 6; 7; 8];
e = Eight_Bit_Type_Array(repmat(yo, 1, 200));
disp(e);
disp(e.to_tuple_string());
disp(e.to_byte_array());
disp(e.to_byte_string());
data = e.to_byte_array();
disp("create eight2:");
e2 = Eight_Bit_Type_Array();
assert(e ~= e2);
disp(e2);
disp("fill eight2:");
e2 = e2.from_byte_array(data);
disp(e2);
assert(e == e2);
disp("passed.");
disp("");

disp("testing unaligned:");
disp("create unaligned:");
u = Unaligned_Array([1, 2, 3, 4, 5, 6, 7, 8]);
disp(u);
disp(u.to_tuple_string());
disp(u.to_byte_array());
disp(u.to_byte_string());
data = u.to_byte_array();
disp("create unaligned2:");
u2 = Unaligned_Array();
assert(u ~= u2);
disp(u2);
disp("fill unaligned2:");
u2 = u2.from_byte_array(data);
disp(u2);
assert(u == u2);
disp("passed.");
disp("");

disp("testing enum:");
disp("create enum:");
en = Enum_Array([First_Enum(1), First_Enum(2), First_Enum(3), First_Enum(0), First_Enum(1)]);
disp(en);
disp(en.to_tuple_string());
disp(en.to_byte_array());
disp(en.to_byte_string());
data = en.to_byte_array();
disp("create enum2:");
en2 = Enum_Array();
assert(en ~= en2);
disp(en2);
disp("fill enum2:");
en2 = en2.from_byte_array(data);
disp(en2);
assert(en == en2);
disp("passed.");
disp("");
