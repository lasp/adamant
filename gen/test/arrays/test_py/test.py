#!/usr/bin/env python3

# Build our dependencies using the build system.
# This is necessary because some of the depdencies we
# have are autogenerated.
from util import pydep

pydep.build_py_deps()

from aa import Aa
from complex_array import Complex_Array
from eight_bit_type_array import Eight_Bit_Type_Array
from simple_array import Simple_Array
from unaligned_array import Unaligned_Array
from enum_array import Enum_Array
from test_enums import First_Enum
import sys


def println(strn=""):
    sys.stderr.write(strn + "\n")


# Main:
if __name__ == "__main__":
    println("testing simple:")
    println("create simple:")
    s = Simple_Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
    println(str(s))
    println(str(s.to_tuple_string()))
    println(str(s.to_byte_array().hex()))
    println(str(s.to_byte_string()))
    data = s.to_byte_array()
    println("create simple2:")
    s2 = Simple_Array()
    assert s != s2
    println(str(s2))
    println("fill simple2:")
    s2.from_byte_array(data)
    println(str(s2))
    assert s == s2
    println("passed.")
    println()

    println("testing complex:")
    println("create complex:")
    a = Aa(1, 2, 3)
    c = Complex_Array([a for idx in range(25)])
    println(str(c))
    println(str(c.to_tuple_string()))
    println(str(c.to_byte_array().hex()))
    println(str(c.to_byte_string()))
    data = c.to_byte_array()
    println("create complex2:")
    c2 = Complex_Array()
    assert c != c2
    println(str(c2))
    println("fill complex2:")
    c2.from_byte_array(data)
    println(str(c2))
    assert c == c2
    println("passed.")
    println()

    println("testing eight:")
    println("create eight:")
    yo = [1, 2, 3, 4, 5, 6, 7, 8]
    e = Eight_Bit_Type_Array([yo for idx in range(200)])
    println(str(e))
    println(str(e.to_tuple_string()))
    println(str(e.to_byte_array().hex()))
    println(str(e.to_byte_string()))
    data = e.to_byte_array()
    println("create eight2:")
    e2 = Eight_Bit_Type_Array()
    assert e != e2
    println(str(e2))
    println("fill eight2:")
    e2.from_byte_array(data)
    println(str(e2))
    assert e == e2
    println("passed.")
    println()

    println("testing unaligned:")
    println("create unaligned:")
    u = Unaligned_Array([1, 2, 3, 4, 5, 6, 7, 8])
    println(str(u))
    println(str(u.to_tuple_string()))
    println(str(u.to_byte_array().hex()))
    println(str(u.to_byte_string()))
    data = u.to_byte_array()
    println("create unaligned2:")
    u2 = Unaligned_Array()
    assert u != u2
    println(str(u2))
    println("fill unaligned2:")
    u2.from_byte_array(data)
    println(str(u2))
    assert u == u2
    println("passed.")
    println()

    println("testing enum:")
    println("create enum:")
    en = Enum_Array(
        [First_Enum(1), First_Enum(2), First_Enum(3), First_Enum(0), First_Enum(1)]
    )
    println(str(en))
    println(str(en.to_tuple_string()))
    println(str(en.to_byte_array().hex()))
    println(str(en.to_byte_string()))
    data = en.to_byte_array()
    println("create enum2:")
    en2 = Enum_Array()
    assert en != en2
    println(str(en2))
    println("fill enum2:")
    en2.from_byte_array(data)
    println(str(en2))
    assert en == en2
    println("passed.")
    println()
