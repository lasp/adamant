#!/usr/bin/env python3

# Build our dependencies using the build system.
# This is necessary because some of the depdencies we
# have are autogenerated.
from util import pydep

pydep.build_py_deps()

from aa import Aa
from bb import Bb
from cc import Cc
from dd import Dd
from simple_variable import Simple_Variable
from simple_variable_holder import Simple_Variable_Holder
from simple_variable_offset import Simple_Variable_Offset
from header import Header
from another_header import Another_Header
from simple_variable_header import Simple_Variable_Header
from simple_variable_array import Simple_Variable_Array
from complex_array import Complex_Array
from test_enums import Second_Enum
import sys


def println(strn=""):
    sys.stderr.write(strn + "\n")


# Main:
if __name__ == "__main__":
    println("testing A:")
    println("create A:")
    a = Aa(1, 2, 3)
    ai2 = Aa(1, 2, 3)
    println(str(a))
    println(str(a.to_tuple_string()))
    println(str(a.to_byte_array().hex()))
    println(str(a.to_byte_string()))
    data = a.to_byte_array()
    println("create A2:")
    a2 = Aa()
    assert a != a2
    println(str(a2))
    println("fill A2:")
    a2.from_byte_array(data)
    println(str(a2))
    assert a == a2
    println("passed.")
    println()

    println("testing B:")
    println("create B:")
    b = Bb(15, 57)
    println(str(b))
    println(str(b.to_tuple_string()))
    println(str(b.to_byte_array().hex()))
    println(str(b.to_byte_string()))
    data = b.to_byte_array()
    println("create B2:")
    b2 = Bb()
    assert b != b2
    println(str(b2))
    println("fill B2:")
    b2.from_byte_array(data)
    println(str(b2))
    assert b == b2
    println("passed.")
    println()

    println("testing C:")
    println("create C:")
    c = Cc(Second_Enum(10), a, b)
    println(str(c))
    println(str(c.to_tuple_string()))
    println(str(c.to_byte_array().hex()))
    println(str(c.to_byte_string()))
    data = c.to_byte_array()
    println("create C2:")
    c2 = Cc()
    assert c != c2
    println(str(c2))
    println("fill C2:")
    c2.from_byte_array(data)
    println(str(c2))
    assert c == c2
    println("passed.")
    println()

    println("testing D:")
    println("create D:")
    d = Dd(Bytes=[255, 5, 4, 3, 2, 1], Words=[55, 56, 57, 58], Odd_Ball=16)
    println(str(d))
    println(str(d.to_tuple_string()))
    println(str(d.to_byte_array().hex()))
    println(str(d.to_byte_string()))
    data = d.to_byte_array()
    println("create D2:")
    d2 = Dd()
    assert d != d2
    println(str(d2))
    println("fill D2:")
    d2.from_byte_array(data)
    println(str(d2))
    assert d == d2
    println("passed.")
    println()

    println("testing simple:")
    println("create simple:")
    s = Simple_Variable(Length=5, Buffer=[1, 2, 3, 4, 5])
    println(str(s))
    println(str(s.to_tuple_string()))
    println(str(s.to_byte_array().hex()))
    println(str(s.to_byte_string()))
    data = s.to_byte_array()
    println("create simple2:")
    s2 = Simple_Variable()
    assert s != s2
    println(str(s2))
    println("fill simple2:")
    s2.from_byte_array(data)
    println(str(s2))
    assert s == s2
    println("passed.")
    println()

    println("testing holder:")
    println("create holder:")
    h = Simple_Variable_Holder(Random_Field=17, Simple=s)
    println(str(h))
    println(str(h.to_tuple_string()))
    println(str(h.to_byte_array().hex()))
    println(str(h.to_byte_string()))
    data = h.to_byte_array()
    println("create holder2:")
    h2 = Simple_Variable_Holder()
    assert h != h2
    println(str(h2))
    println("fill holder2:")
    h2.from_byte_array(data)
    println(str(h2))
    assert h == h2
    println("passed.")
    println()

    println("testing offset:")
    println("create offset:")
    o = Simple_Variable_Offset(Length=5, Buffer=[1, 2, 3, 4, 5, 6])
    println(str(o))
    println(str(o.to_tuple_string()))
    println(str(o.to_byte_array().hex()))
    println(str(o.to_byte_string()))
    data = o.to_byte_array()
    println("create offset2:")
    o2 = Simple_Variable_Offset()
    assert o != o2
    println(str(o2))
    println("fill offset2:")
    o2.from_byte_array(data)
    println(str(o2))
    assert o == o2
    println("passed.")
    println()

    println("testing header:")
    println("create header:")
    header = Header(A=a, Length=7)
    another_header = Another_Header(B=99, Secondary_Header=header)
    h = Simple_Variable_Header(Header=another_header, Buffer=[1, 2, 3, 4, 5, 6, 7])
    println(str(h))
    println(str(h.to_tuple_string()))
    println(str(h.to_byte_array().hex()))
    println(str(h.to_byte_string()))
    data = h.to_byte_array()
    println("create header2:")
    h2 = Simple_Variable_Header()
    assert h != h2
    println(str(h2))
    println("fill header2:")
    h2.from_byte_array(data)
    println(str(h2))
    assert h == h2
    println("passed.")
    println()

    println("testing array:")
    println("create array:")
    c = Complex_Array([a for idx in range(25)])
    arr = Simple_Variable_Array(Length=4, Buffer=c)
    println(str(arr))
    println(str(arr.to_tuple_string()))
    println(str(arr.to_byte_array().hex()))
    println(str(arr.to_byte_string()))
    data = arr.to_byte_array()
    println("create array2:")
    arr2 = Simple_Variable_Array()
    assert arr != arr2
    println(str(arr2))
    println("fill array2:")
    arr2.from_byte_array(data)
    println(str(arr2))
    assert arr == arr2
    println("passed.")
    println()
