disp("testing A:");
disp("create A:");
a = Aa(1, 2, 3);
ai2 = Aa(1, 2, 3);
disp(a);
disp(a.to_tuple_string());
disp(a.to_byte_array());
disp(a.to_byte_string());
data = a.to_byte_array();
disp("create A2:");
a2 = Aa(0, 0, 0);
a3 = Aa.create_empty();
assert(a3 == a2);
a4 = Aa();
assert(a4 == a3);
assert(a ~= a2);
disp(a2);
disp("fill A2:");
a2 = a2.from_byte_array(data);
disp(a2);
assert(a == a2);
disp("passed.");
disp("");

disp("testing B:");
disp("create B:");
b = Bb(15, 57);
disp(b);
disp(b.to_tuple_string());
disp(b.to_byte_array());
disp(b.to_byte_string());
data = b.to_byte_array();
disp("create B2:");
b2 = Bb(0, 0);
b3 = Bb.create_empty();
assert(b2 == b2);
b4 = Bb();
assert(b4 == b3);
assert(b ~= b2);
disp(b2);
disp("fill B2:");
b2 = b2.from_byte_array(data);
disp(b2);
assert(b == b2);
disp("passed.");
disp("");

disp("testing C:");
disp("create C:");
c = Cc(Second_Enum(10), a, b);
disp(c);
disp(c.to_tuple_string());
disp(c.to_byte_array());
disp(c.to_byte_string());
disp(c.to_string());
data = c.to_byte_array();
disp("create C2:");
c2 = Cc(Second_Enum.Hola, Aa(0, 0, 0), Bb(0, 0));
c3 = Cc.create_empty();
assert(c2 == c3);
c4 = Cc();
assert(c4 == c3);
assert(c ~= c2);
disp(c2);
disp("fill C2:");
c2 = c2.from_byte_array(data);
disp(c2);
assert(c == c2);
disp("passed.");
disp("");

disp("testing D:");
disp("create D:");
d = Dd([255, 5, 4, 3, 2, 1], [55, 56, 57, 58], 16);
disp(d);
disp(d.to_tuple_string());
disp(d.to_byte_array());
disp(d.to_byte_string());
disp(d.to_string())
data = d.to_byte_array();
disp("create D2:");
d2 = Dd([0, 0, 0, 0, 0, 0], [0, 0, 0, 0], 0);
d3 = Dd.create_empty();
assert(d2 == d3);
d4 = Dd();
assert(d4 == d3);
assert(d ~= d2);
disp(d2);
disp("fill D2:");
d2 = d2.from_byte_array(data);
disp(d2);
assert(d == d2);
disp("passed.");
disp("");

disp("testing simple:");
disp("create simple:");
s = Simple_Variable(5, [1, 2, 3, 4, 5]);
disp(s);
disp(s.to_tuple_string());
disp(s.to_byte_array());
disp(s.to_byte_string());
data = s.to_byte_array();
disp("create simple2:");
s2 = Simple_Variable(0, []);
disp(s2.to_tuple_string());
disp(s2.to_byte_array());
disp(s2.to_byte_string());
s3 = Simple_Variable.create_empty();
assert(s2 == s3);
s4 = Simple_Variable();
assert(s4 == s3);
assert(s ~= s2);
disp(s2);
disp("fill simple2:");
s2 = s2.from_byte_array(data);
disp(s2);
assert(s == s2);
disp("passed.");
disp("");

disp("testing holder:");
disp("create holder:");
h = Simple_Variable_Holder(17, s);
disp(h);
disp(h.to_tuple_string());
disp(h.to_byte_array());
disp(h.to_byte_string());
data = h.to_byte_array();
disp("create holder2:");
h2 = Simple_Variable_Holder();
assert(h ~= h2);
disp(h2.to_tuple_string());
disp(h2);
disp("fill holder2:");
h2 = h2.from_byte_array(data);
disp(h2);
assert(h == h2);
disp("passed.");
disp("");

disp("testing offset:");
disp("create offset:");
o = Simple_Variable_Offset(5, [1, 2, 3, 4, 5, 6]);
disp(o);
disp(o.to_tuple_string());
disp(o.to_byte_array());
disp(o.to_byte_string());
data = o.to_byte_array();
disp("create offset2:");
o2 = Simple_Variable_Offset();
assert(o ~= o2);
disp(o2);
disp("fill offset2:");
o2 = o2.from_byte_array(data);
disp(o2);
assert(o == o2);
disp("passed.");
disp("");

disp("testing header:");
disp("create header:");
header = Header(a, 7);
another_header = Another_Header(99, header);
h = Simple_Variable_Header(another_header, [1, 2, 3, 4, 5, 6, 7]);
disp(h);
disp(h.to_tuple_string());
disp(h.to_byte_array());
disp(h.to_byte_string());
data = h.to_byte_array();
disp("create header2:");
h2 = Simple_Variable_Header();
assert(h ~= h2);
disp(h2);
disp("fill header2:");
h2 = h2.from_byte_array(data);
disp(h2);
assert(h == h2);
disp("passed.");
disp("");

disp("testing array:");
disp("create array:");
c = Complex_Array(repmat(a, 1, 25));
arr = Simple_Variable_Array(4, c);
disp(arr);
disp(arr.to_tuple_string());
disp(arr.to_byte_array());
disp(arr.to_byte_string());
data = arr.to_byte_array();
disp("create array2:");
arr2 = Simple_Variable_Array();
assert(arr ~= arr2);
disp(arr2);
disp("fill array2:");
arr2 = arr2.from_byte_array(data);
disp(arr2);
assert(arr == arr2);
disp("passed.");
disp("");
